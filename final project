#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100 // to store 100 only students can save to file #define SUBJECTS 3 // to define only 3 subjects to store and save in file #define FILENAME "students.txt"// Makita nimo ang Students information nga mabasa RaðŸ˜Š
#define SUBJECTS 3
#define FILENAME "students.txt"

typedef struct {
    int id;
    char name[50];
    float grades[SUBJECTS];
    float average;
} Student;

// Function declarations
void addStudent(Student students[], int *count);
void editStudent(Student students[], int count);
void deleteStudent(Student students[], int *count);
void displayStudents(Student students[], int count);
void saveToFile(Student students[], int count);
void loadFromFile(Student students[], int *count);
void computeAverage(Student *s);

int main() {
    Student students[MAX];
    int count = 0, choice;

    loadFromFile(students, &count);

    do {
        printf("\n--- Student Record Management System ---\n");
        printf("1. Add Student\n");
        printf("2. Edit Student\n");
        printf("3. Delete Student\n");
        printf("4. View All Students\n");
        printf("5. Save and Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1: addStudent(students, &count); break;
            case 2: editStudent(students, count); break;
            case 3: deleteStudent(students, &count); break;
            case 4: displayStudents(students, count); break;
            case 5: saveToFile(students, count); printf("Data saved. Goodbye!\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while(choice != 5);

    return 0;
}

/*addStudent Accepts an array of students and the current count (passed by pointer). Takes input for ID, name, and grades. Calls computeAverage() to calculate and store the average. Increments the count after adding. */ 

void addStudent(Student students[], int *count) {
    Student *s = &students[*count];
    printf("\nEnter ID: ");
    scanf("%d", &s->id);
    printf("Enter Name: ");
    while ((getchar()) != '\n'); // flush newline
    fgets(s->name, sizeof(s->name), stdin);
    s->name[strcspn(s->name, "\n")] = '\0'; // remove newline

    printf("Enter %d grades: ", SUBJECTS);
    for(int i = 0; i < SUBJECTS; i++) {
        scanf("%f", &s->grades[i]);
    }

    computeAverage(s);
    (*count)++;
    printf("Student added successfully!\n");
}

/* Editing student information ðŸ˜Š When you choose option 1: It asks for the student ID. If found, you can change the name and grades. Then it recomputes the average. Changes are saved in memory, and later to file if you choose "Save and Exit". */
void editStudent(Student students[], int count) {
    int id, found = 0;
    printf("\nEnter student ID to edit: ");
    scanf("%d", &id);

    for(int i = 0; i < count; i++) {
        if(students[i].id == id) {
            printf("Editing %s\n", students[i].name);
            printf("Enter new name: ");
            while ((getchar()) != '\n'); // flush newline
            fgets(students[i].name, sizeof(students[i].name), stdin);
            students[i].name[strcspn(students[i].name, "\n")] = '\0';

            printf("Enter %d new grades: ", SUBJECTS);
            for(int j = 0; j < SUBJECTS; j++) {
                scanf("%f", &students[i].grades[j]);
            }

            computeAverage(&students[i]);
            printf("Student updated successfully!\n");
            found = 1;
            break;
        }
    }

    if(!found)
        printf("Student with ID %d not found.\n", id);
}

/*deleteStudent When you choose option 3: It asks for the student ID to delete. If found, that student is removed by shifting the remaining students. Count is updated. Will also be saved to file after you exit and save. */
void deleteStudent(Student students[], int *count) {
    int id, found = 0;
    printf("\nEnter student ID to delete: ");
    scanf("%d", &id);

    for(int i = 0; i < *count; i++) {
        if(students[i].id == id) {
            for(int j = i; j < *count - 1; j++) {
                students[j] = students[j + 1];
            }
            (*count)--;
            printf("Student deleted successfully!\n");
            found = 1;
            break;
        }
    }

    if(!found)
        printf("Student with ID %d not found.\n", id);
}

void displayStudents(Student students[], int count) {
    printf("\n%-5s %-20s %-20s %-10s\n", "ID", "Name", "Grades", "Average");
    printf("--------------------------------------------------------------\n");
    for(int i = 0; i < count; i++) {
        printf("%-5d %-20s ", students[i].id, students[i].name);
        for(int j = 0; j < SUBJECTS; j++) {
            printf("%.1f ", students[i].grades[j]);
        }
        printf(" %.2f\n", students[i].average);
    }
}

void computeAverage(Student *s) {
    float sum = 0;
    for(int i = 0; i < SUBJECTS; i++) {
        sum += s->grades[i];
    }
    s->average = sum / SUBJECTS;
}

void saveToFile(Student students[], int count) {
    FILE *fp = fopen(FILENAME, "w");
    if(fp == NULL) {
        printf("Error saving file!\n");
        return;
    }

    for(int i = 0; i < count; i++) {
        fprintf(fp, "%d|%s|", students[i].id, students[i].name);
        for(int j = 0; j < SUBJECTS; j++) {
            fprintf(fp, "%.1f", students[i].grades[j]);
            if (j < SUBJECTS - 1) fprintf(fp, ",");
        }
        fprintf(fp, "|%.2f\n", students[i].average);
    }

    fclose(fp);
}

void loadFromFile(Student students[], int *count) {
    FILE *fp = fopen(FILENAME, "r");
    if(fp == NULL) return;

    char line[256];
    while(fgets(line, sizeof(line), fp)) {
        char *token = strtok(line, "|");
        if (token == NULL) continue;
        students[*count].id = atoi(token);

        token = strtok(NULL, "|");
        if (token == NULL) continue;
        strcpy(students[*count].name, token);

        token = strtok(NULL, "|");
        if (token == NULL) continue;
        char *gradeToken = strtok(token, ",");
        for (int i = 0; i < SUBJECTS && gradeToken != NULL; i++) {
            students[*count].grades[i] = atof(gradeToken);
            gradeToken = strtok(NULL, ",");
        }

        token = strtok(NULL, "|");
        if (token != NULL)
            students[*count].average = atof(token);

        (*count)++;
    }

    fclose(fp);
}
